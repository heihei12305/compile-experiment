// 使得G<->E'
// 使得H<->T'
// 空 暂时用 K 代替
// E->TE'  写作  GT
export const predictiveAnalysisTable = {
  'E':{
    'i': 'GT',
    '(': 'GT'
  },
  'G':{
    '+': 'GT+',
    ')': 'K',
    '#': 'K'
  },
  'T':{
    'i': 'HF',
    '(': 'HF'
  },
  'H':{
    '+': 'K',
    '*': 'HF*',
    ')': 'K',
    '#': 'K'
  },
  'F':{
    'i': 'i',
    '(': '(E)'
  }
}

// 使得G<->E'
// 使得H<->T'
// 空 暂时用 K 代替
// E->TE'  写作  GT
export const grammarReverse = {
  '^': ['F',3,0],
  '*': ['T',3,0],
  '+': ['E',3,0],
  '(': ['P',2,1],
  'i': ['F',1,0]
}

export const operatorPrecedence = {
  '+':{
    '+': '>',
    '*': '<',
    '^': '<',
    'i': '<',
    '(': '<',
    ')': '>',
    '#': '>'
  },
  '*':{
    '+': '>',
    '*': '>',
    '^': '<',
    'i': '<',
    '(': '<',
    ')': '>',
    '#': '>'
  },
  '^':{
    '+': '>',
    '*': '>',
    '^': '<',
    'i': '<',
    '(': '<',
    ')': '>',
    '#': '>'
  },
  'i':{
    '+': '>',
    '*': '>',
    '^': '>',
    ')': '>',
    '#': '>'
  },
  '(':{
    '+': '<',
    '*': '<',
    '^': '<',
    'i': '<',
    '(': '<',
    ')': '='
  },
  ')':{
    '+': '>',
    '*': '>',
    '^': '>',
    ')': '>',
    '#': '>'
  },
  '#':{
    '+': '<',
    '*': '<',
    '^': '<',
    'i': '<',
    '(': '<',
    '#': '='
  }
}
 